    Finished dev [unoptimized + debuginfo] target(s) in 0.16s
     Running `target/debug/capy-boot lib/system/usual.scm lib/system/boot.scm lib/system/control.scm lib/system/eval.scm`
Compiling lib/system/usual.scm...
Compiling lib/system/boot.scm...
Compiling lib/system/control.scm...
Compiling lib/system/eval.scm...
(lambda[0x5556f6658a10] <toplevel> 
 (seq (const #<undefined>)
  (const #<undefined>)
  (const #<undefined>)
  (const #<undefined>)
  (const #<undefined>)
  (const #<undefined>)
  (const #<undefined>)
  (const #<undefined>)
  (const #<undefined>)
  (const #<undefined>)
  (const #<undefined>)
  (define #<identifier identity.0x5556f665d440> (lambda[0x5556f64061a0] identity (x.0x5556f6673360)
   (lref x.0x5556f6673360)))
  (define #<identifier find.0x5556f665d3a0> (lambda[0x5556f6665620] find (proc.0x5556f6673960)
   (list.0x5556f66732c0)
   (fix ([loop.0x5556f664f870 (lambda[0x5556f6665300]  (rest.0x5556f664f8b0)
     (if (primcall null? (lref rest.0x5556f664f8b0))
      (const #f)
      (let let
        (car.0x5556f665cb60 (primcall car (lref rest.0x5556f664f8b0)))
       (if (call (lref proc.0x5556f6673960) (lref car.0x5556f665cb60))
        (lref car.0x5556f665cb60)
        (call (lref loop.0x5556f664f870)
         (primcall cdr (lref rest.0x5556f664f8b0)))))))])
    (call (lref loop.0x5556f664f870) (lref list.0x5556f66732c0)))))
  (const #<undefined>)
  (define #<identifier for-all.0x5556f6679690> (lambda[0x5556f667cb30] for-all (#<identifier proc.0x5556f664fb40>.0x5556f6679710)
   (#<identifier list1.0x5556f665c9a0>.0x5556f6679750)
   (#<identifier lists.0x5556f665cc70>.0x5556f6679790)
   (fix ([#<identifier length-error.0x5556f665ef60>.0x5556f66797d0 (lambda[0x5556f6679a50]  
     (primcall error (const "Lists don't have the same length.")
     (primcall cons (lref #<identifier list1.0x5556f665c9a0>.0x5556f6679750)
     (lref #<identifier lists.0x5556f665cc70>.0x5556f6679790))))])
    (if (primcall null? (lref #<identifier list1.0x5556f665c9a0>.0x5556f6679750))
     (if (if (primcall null? (lref #<identifier lists.0x5556f665cc70>.0x5556f6679790))
       (primcall null? (lref #<identifier lists.0x5556f665cc70>.0x5556f6679790))
       (call (gref #<identifier for-all.0x5556f664f7d0>)
        (primref null?)
        (lref #<identifier lists.0x5556f665cc70>.0x5556f6679790)))
      (const #t)
      (call (lref #<identifier length-error.0x5556f665ef60>.0x5556f66797d0)
      ))
     (fix ([#<identifier loop.0x5556f66510d0>.0x5556f6679850 (lambda[0x5556f667c090]  (#<identifier car1.0x5556f6656a60>.0x5556f6679810)
       (#<identifier cars.0x5556f66783f0>.0x5556f667a060)
       (#<identifier cdr1.0x5556f66786b0>.0x5556f667a860)
       (#<identifier cdrs.0x5556f6678940>.0x5556f667a8a0)
       (if (primcall null? (lref #<identifier cdr1.0x5556f66786b0>.0x5556f667a860))
        (if (call (gref #<identifier for-all.0x5556f664f7d0>)
          (primref null?)
          (lref #<identifier cdrs.0x5556f6678940>.0x5556f667a8a0))
         (call (gref #<identifier apply.0x5556f6678d10>)
          (lref #<identifier proc.0x5556f664fb40>.0x5556f6679710)
          (lref #<identifier car1.0x5556f6656a60>.0x5556f6679810)
          (lref #<identifier cars.0x5556f66783f0>.0x5556f667a060))
         (call (lref #<identifier length-error.0x5556f665ef60>.0x5556f66797d0)
         ))
        (let let
          (#<identifier value.0x5556f6678f90>.0x5556f667aa00 (call (gref #<identifier apply.0x5556f6678d10>)
           (lref #<identifier proc.0x5556f664fb40>.0x5556f6679710)
           (lref #<identifier car1.0x5556f6656a60>.0x5556f6679810)
           (lref #<identifier cars.0x5556f66783f0>.0x5556f667a060)))
         (if (primcall not (lref #<identifier value.0x5556f6678f90>.0x5556f667aa00))
          (lref #<identifier value.0x5556f6678f90>.0x5556f667aa00)
          (call (lref #<identifier loop.0x5556f66510d0>.0x5556f6679850)
           (primcall car (lref #<identifier cdr1.0x5556f66786b0>.0x5556f667a860))
           (call (gref #<identifier map.0x5556f66784f0>)
            (primref car)
            (lref #<identifier cdrs.0x5556f6678940>.0x5556f667a8a0))
           (primcall cdr (lref #<identifier cdr1.0x5556f66786b0>.0x5556f667a860))
           (call (gref #<identifier map.0x5556f66784f0>)
            (primref cdr)
            (lref #<identifier cdrs.0x5556f6678940>.0x5556f667a8a0)))))))])
      (call (lref #<identifier loop.0x5556f66510d0>.0x5556f6679850)
       (primcall car (lref #<identifier list1.0x5556f665c9a0>.0x5556f6679750))
       (call (gref #<identifier map.0x5556f66784f0>)
        (primref car)
        (lref #<identifier lists.0x5556f665cc70>.0x5556f6679790))
       (primcall cdr (lref #<identifier list1.0x5556f665c9a0>.0x5556f6679750))
       (call (gref #<identifier map.0x5556f66784f0>)
        (primref cdr)
        (lref #<identifier lists.0x5556f665cc70>.0x5556f6679790))))))))
  (define #<identifier exists.0x5556f667d380> (lambda[0x5556f6680430] exists (#<identifier proc.0x5556f664f650>.0x5556f667d400)
   (#<identifier list1.0x5556f6673740>.0x5556f667d440)
   (#<identifier lists.0x5556f664eda0>.0x5556f667d480)
   (fix ([#<identifier length-error.0x5556f66796d0>.0x5556f667d4c0 (lambda[0x5556f667d580]  
     (primcall error (const "Lists don't have the same length.")
     (primcall cons (lref #<identifier list1.0x5556f6673740>.0x5556f667d440)
     (lref #<identifier lists.0x5556f664eda0>.0x5556f667d480))))])
    (if (primcall null? (lref #<identifier list1.0x5556f6673740>.0x5556f667d440))
     (if (if (primcall null? (lref #<identifier lists.0x5556f664eda0>.0x5556f667d480))
       (primcall null? (lref #<identifier lists.0x5556f664eda0>.0x5556f667d480))
       (call (gref #<identifier for-all.0x5556f667b190>)
        (primref null?)
        (lref #<identifier lists.0x5556f664eda0>.0x5556f667d480)))
      (const #f)
      (call (lref #<identifier length-error.0x5556f66796d0>.0x5556f667d4c0)
      ))
     (fix ([#<identifier loop.0x5556f667d0a0>.0x5556f667d540 (lambda[0x5556f667f990]  (#<identifier car1.0x5556f667d0e0>.0x5556f667d500)
       (#<identifier cars.0x5556f667d160>.0x5556f667d960)
       (#<identifier cdr1.0x5556f667d1e0>.0x5556f667e160)
       (#<identifier cdrs.0x5556f667d260>.0x5556f667e1a0)
       (if (primcall null? (lref #<identifier cdr1.0x5556f667d1e0>.0x5556f667e160))
        (if (call (gref #<identifier for-all.0x5556f667b190>)
          (primref null?)
          (lref #<identifier cdrs.0x5556f667d260>.0x5556f667e1a0))
         (call (gref #<identifier apply.0x5556f667d2a0>)
          (lref #<identifier proc.0x5556f664f650>.0x5556f667d400)
          (lref #<identifier car1.0x5556f667d0e0>.0x5556f667d500)
          (lref #<identifier cars.0x5556f667d160>.0x5556f667d960))
         (call (lref #<identifier length-error.0x5556f66796d0>.0x5556f667d4c0)
         ))
        (let let
          (#<identifier value.0x5556f667d2e0>.0x5556f667e300 (call (gref #<identifier apply.0x5556f667d2a0>)
           (lref #<identifier proc.0x5556f664f650>.0x5556f667d400)
           (lref #<identifier car1.0x5556f667d0e0>.0x5556f667d500)
           (lref #<identifier cars.0x5556f667d160>.0x5556f667d960)))
         (if (call (gref #<identifier identity.0x5556f667ea90>)
           (lref #<identifier value.0x5556f667d2e0>.0x5556f667e300))
          (lref #<identifier value.0x5556f667d2e0>.0x5556f667e300)
          (call (lref #<identifier loop.0x5556f667d0a0>.0x5556f667d540)
           (primcall car (lref #<identifier cdr1.0x5556f667d1e0>.0x5556f667e160))
           (call (gref #<identifier map.0x5556f667d1a0>)
            (primref car)
            (lref #<identifier cdrs.0x5556f667d260>.0x5556f667e1a0))
           (primcall cdr (lref #<identifier cdr1.0x5556f667d1e0>.0x5556f667e160))
           (call (gref #<identifier map.0x5556f667d1a0>)
            (primref cdr)
            (lref #<identifier cdrs.0x5556f667d260>.0x5556f667e1a0)))))))])
      (call (lref #<identifier loop.0x5556f667d0a0>.0x5556f667d540)
       (primcall car (lref #<identifier list1.0x5556f6673740>.0x5556f667d440))
       (call (gref #<identifier map.0x5556f667d1a0>)
        (primref car)
        (lref #<identifier lists.0x5556f664eda0>.0x5556f667d480))
       (primcall cdr (lref #<identifier list1.0x5556f6673740>.0x5556f667d440))
       (call (gref #<identifier map.0x5556f667d1a0>)
        (primref cdr)
        (lref #<identifier lists.0x5556f664eda0>.0x5556f667d480))))))))
  (define #<identifier cons*.0x5556f665f2a0> (lambda[0x5556f66809d0] cons* (args.0x5556f665d0e0)
   (if (primcall null? (lref args.0x5556f665d0e0))
    (const ())
    (primcall cons (primcall car (lref args.0x5556f665d0e0))
    (primcall cons* (primcall cdr (lref args.0x5556f665d0e0)))))))
  (define #<identifier vector-ref.0x5556f6652710> (lambda[0x5556f6680d90] vector-ref (v.0x5556f6653060)
   (i.0x5556f667d3c0)
   (primcall vector-ref (lref v.0x5556f6653060)
   (lref i.0x5556f667d3c0))))
  (define #<identifier vector-set!.0x5556f664f040> (lambda[0x5556f66810d0] vector-set! (v.0x5556f667b550)
   (i.0x5556f66787b0)
   (x.0x5556f6680ef0)
   (primcall vector-set! (lref v.0x5556f667b550)
   (lref i.0x5556f66787b0)
   (lref x.0x5556f6680ef0))))
  (define #<identifier vector-length.0x5556f667d120> (lambda[0x5556f6681440] vector-length (v.0x5556f6680fb0)
   (primcall vector-length (lref v.0x5556f6680fb0))))
  (define #<identifier exn-vtable.0x5556f6680f30> (call (gref #<identifier make-vtable.0x5556f6681380>)
   (const "phphph")))
  (define #<identifier exn?.0x5556f6681400> (lambda[0x5556f6681e30] exn? (x.0x5556f66817a0)
   (if (primcall struct? (lref x.0x5556f66817a0))
    (primcall eq? (primcall struct-vtable (lref x.0x5556f66817a0))
    (gref exn-vtable))
    (const #f))))
  (define #<identifier exn-message.0x5556f667ee50> (lambda[0x5556f6682320] exn-message (exn.0x5556f66817e0)
   (if (call (gref #<identifier exn?.0x5556f6681a30>)
     (lref exn.0x5556f66817e0))
    (primcall struct-ref (lref exn.0x5556f66817e0) (const 1))
    (const #f))))
  (define #<identifier exn-stack-trace.0x5556f6681760> (lambda[0x5556f6682970] exn-stack-trace (exn.0x5556f6681ae0)
   (if (call (gref #<identifier exn?.0x5556f6682610>)
     (lref exn.0x5556f6681ae0))
    (primcall struct-ref (lref exn.0x5556f6681ae0) (const 2))
    (const #f))))
  (define #<identifier exn-kind.0x5556f6681820> (lambda[0x5556f6683290] exn-kind (exn.0x5556f66825d0)
   (if (call (gref #<identifier exn?.0x5556f6682ea0>)
     (lref exn.0x5556f66825d0))
    (primcall struct-ref (lref exn.0x5556f66825d0) (const 0))
    (const #f))))
  (define #<identifier assq.0x5556f6682120> (lambda[0x5556f66854b0] assq (key.0x5556f6682e30)
   (alist.0x5556f6682fb0)
   (fix ([loop.0x5556f6683fd0 (lambda[0x5556f6685170]  (alist.0x5556f6684010)
     (if (primcall null? (lref alist.0x5556f6684010))
      (const #f)
      (let let
        (pair.0x5556f6684460 (primcall car (lref alist.0x5556f6684010)))
       (if (primcall eq? (lref key.0x5556f6682e30)
        (primcall car (lref pair.0x5556f6684460)))
        (lref pair.0x5556f6684460)
        (call (lref loop.0x5556f6683fd0)
         (primcall cdr (lref alist.0x5556f6684010)))))))])
    (call (lref loop.0x5556f6683fd0) (lref alist.0x5556f6682fb0)))))
  (define #<identifier assv.0x5556f6684380> (lambda[0x5556f6686e50] assv (key.0x5556f6684850)
   (alist.0x5556f6684df0)
   (fix ([loop.0x5556f6682690 (lambda[0x5556f6686b10]  (alist.0x5556f6681860)
     (if (primcall null? (lref alist.0x5556f6681860))
      (const #f)
      (let let
        (pair.0x5556f6685ee0 (primcall car (lref alist.0x5556f6681860)))
       (if (primcall eqv? (lref key.0x5556f6684850)
        (primcall car (lref pair.0x5556f6685ee0)))
        (lref pair.0x5556f6685ee0)
        (call (lref loop.0x5556f6682690)
         (primcall cdr (lref alist.0x5556f6681860)))))))])
    (call (lref loop.0x5556f6682690) (lref alist.0x5556f6684df0)))))
  (define #<identifier assoc.0x5556f6684930> (lambda[0x5556f6688790] assoc (key.0x5556f66861f0)
   (alist.0x5556f6686790)
   (fix ([loop.0x5556f6684570 (lambda[0x5556f6688450]  (alist.0x5556f66842a0)
     (if (primcall null? (lref alist.0x5556f66842a0))
      (const #f)
      (let let
        (pair.0x5556f6687820 (primcall car (lref alist.0x5556f66842a0)))
       (if (primcall equal? (lref key.0x5556f66861f0)
        (primcall car (lref pair.0x5556f6687820)))
        (lref pair.0x5556f6687820)
        (call (lref loop.0x5556f6684570)
         (primcall cdr (lref alist.0x5556f66842a0)))))))])
    (call (lref loop.0x5556f6684570) (lref alist.0x5556f6686790)))))
  (define #<identifier list-ref.0x5556f66862d0> (lambda[0x5556f6689af0] list-ref (list.0x5556f6687b30)
   (i.0x5556f66880d0)
   (fix ([loop.0x5556f6685ff0 (lambda[0x5556f6689760]  (list.0x5556f6684500)
     (i.0x5556f6686260)
     (if (primcall = (lref i.0x5556f6686260) (const 0))
      (primcall car (lref list.0x5556f6684500))
      (call (lref loop.0x5556f6685ff0)
       (primcall cdr (lref list.0x5556f6684500))
       (primcall - (lref i.0x5556f6686260) (const 1)))))])
    (call (lref loop.0x5556f6685ff0)
     (lref list.0x5556f6687b30)
     (lref i.0x5556f66880d0)))))
  (define #<identifier zero?.0x5556f6686450> (lambda[0x5556f6688c20] zero? (x.0x5556f6687ba0)
   (primcall = (lref x.0x5556f6687ba0) (const 0))))
  (define #<identifier positive?.0x5556f66878c0> (lambda[0x5556f66733a0] positive? (x.0x5556f66835f0)
   (primcall > (lref x.0x5556f66835f0) (const 0))))
  (define #<identifier negative?.0x5556f6687d90> (lambda[0x5556f6673190] negative? (x.0x5556f664d790)
   (primcall < (lref x.0x5556f664d790) (const 0))))
  (define #<identifier memv.0x5556f6689480> (lambda[0x5556f6687220] memv (obj.0x5556f665b630)
   (list.0x5556f6688ec0)
   (fix ([loop.0x5556f664dca0 (lambda[0x5556f6656970]  (list.0x5556f664d030)
     (if (primcall null? (lref list.0x5556f664d030))
      (const #f)
      (if (primcall eqv? (lref obj.0x5556f665b630)
       (primcall car (lref list.0x5556f664d030)))
       (lref list.0x5556f664d030)
       (call (lref loop.0x5556f664dca0)
        (primcall cdr (lref list.0x5556f664d030))))))])
    (call (lref loop.0x5556f664dca0) (lref list.0x5556f6688ec0)))))
  (define #<identifier memq.0x5556f664e200> (lambda[0x5556f665c4d0] memq (obj.0x5556f665edf0)
   (list.0x5556f664e350)
   (fix ([loop.0x5556f665aac0 (lambda[0x5556f665afb0]  (list.0x5556f664dad0)
     (if (primcall null? (lref list.0x5556f664dad0))
      (const #f)
      (if (primcall eq? (lref obj.0x5556f665edf0)
       (primcall car (lref list.0x5556f664dad0)))
       (lref list.0x5556f664dad0)
       (call (lref loop.0x5556f665aac0)
        (primcall cdr (lref list.0x5556f664dad0))))))])
    (call (lref loop.0x5556f665aac0) (lref list.0x5556f664e350)))))
  (define #<identifier reverse.0x5556f664e070> (lambda[0x5556f6662620] reverse (list.0x5556f6651310)
   (fix ([loop.0x5556f664e270 (lambda[0x5556f666f620]  (list.0x5556f664da10)
     (acc.0x5556f665b8b0)
     (if (primcall null? (lref list.0x5556f664da10))
      (lref acc.0x5556f665b8b0)
      (call (lref loop.0x5556f664e270)
       (primcall cdr (lref list.0x5556f664da10))
       (primcall cons (primcall car (lref list.0x5556f664da10))
       (lref acc.0x5556f665b8b0)))))])
    (call (lref loop.0x5556f664e270)
     (lref list.0x5556f6651310)
     (const ())))))
  (define #<identifier append.0x5556f665aee0> (lambda[0x5556f666c910] append (lists.0x5556f664dc60)
   (if (primcall null? (lref lists.0x5556f664dc60))
    (const ())
    (fix ([loop.0x5556f664e0e0 (lambda[0x5556f666c560]  (lists.0x5556f66513b0)
      (if (primcall null? (primcall cdr (lref lists.0x5556f66513b0)))
       (primcall car (lref lists.0x5556f66513b0))
       (call (gref #<identifier append2.0x5556f666bcf0>)
        (primcall car (lref lists.0x5556f66513b0))
        (call (lref loop.0x5556f664e0e0)
         (primcall cdr (lref lists.0x5556f66513b0))))))])
     (call (lref loop.0x5556f664e0e0) (lref lists.0x5556f664dc60))))))
  (define #<identifier append2.0x5556f664e2e0> (lambda[0x5556f666d760] append2 (list1.0x5556f666b910)
   (list2.0x5556f666c250)
   (if (primcall null? (lref list1.0x5556f666b910))
    (lref list2.0x5556f666c250)
    (primcall cons (primcall car (lref list1.0x5556f666b910))
    (call (gref #<identifier append2.0x5556f666ba60>)
     (primcall cdr (lref list1.0x5556f666b910))
     (lref list2.0x5556f666c250))))))
  (define #<identifier cdr.0x5556f6662110> (lambda[0x5556f666db00] cdr (x.0x5556f666bfc0)
   (primcall cdr (lref x.0x5556f666bfc0))))
  (define #<identifier car.0x5556f6661ef0> (lambda[0x5556f666de90] car (x.0x5556f666bee0)
   (primcall car (lref x.0x5556f666bee0))))
  (define #<identifier caar.0x5556f6651420> (lambda[0x5556f666e590] caar (x.0x5556f666de50)
   (primcall car (primcall car (lref x.0x5556f666de50)))))
  (define #<identifier cadr.0x5556f664fe00> (lambda[0x5556f666eb80] cadr (x.0x5556f666e2f0)
   (primcall car (primcall cdr (lref x.0x5556f666e2f0)))))
  (define #<identifier cdar.0x5556f666e360> (lambda[0x5556f66926c0] cdar (x.0x5556f666e440)
   (primcall cdr (primcall car (lref x.0x5556f666e440)))))
  (define #<identifier cddr.0x5556f666e9c0> (lambda[0x5556f6692cb0] cddr (x.0x5556f666eaa0)
   (primcall cdr (primcall cdr (lref x.0x5556f666eaa0)))))
  (define #<identifier caaar.0x5556f6692500> (lambda[0x5556f6693500] caaar (x.0x5556f66925e0)
   (primcall car (primcall car (primcall car (lref x.0x5556f66925e0))))))
  (define #<identifier caadr.0x5556f66931c0> (lambda[0x5556f6693c40] caadr (x.0x5556f666b9f0)
   (primcall car (primcall car (primcall cdr (lref x.0x5556f666b9f0))))))
  (define #<identifier cadar.0x5556f6693310> (lambda[0x5556f6694380] cadar (x.0x5556f6692af0)
   (primcall car (primcall cdr (primcall car (lref x.0x5556f6692af0))))))
  (define #<identifier caddr.0x5556f6693ac0> (lambda[0x5556f6694ac0] caddr (x.0x5556f6693230)
   (primcall car (primcall cdr (primcall cdr (lref x.0x5556f6693230))))))
  (define #<identifier cdaar.0x5556f6694200> (lambda[0x5556f6695200] cdaar (x.0x5556f66939e0)
   (primcall cdr (primcall car (primcall car (lref x.0x5556f66939e0))))))
  (define #<identifier cdadr.0x5556f6694940> (lambda[0x5556f6695940] cdadr (x.0x5556f6694120)
   (primcall cdr (primcall car (primcall cdr (lref x.0x5556f6694120))))))
  (define #<identifier cddar.0x5556f6695080> (lambda[0x5556f6696080] cddar (x.0x5556f6694860)
   (primcall cdr (primcall cdr (primcall car (lref x.0x5556f6694860))))))
  (define #<identifier cdddr.0x5556f66957c0> (lambda[0x5556f66967c0] cdddr (x.0x5556f6694fa0)
   (primcall cdr (primcall cdr (primcall cdr (lref x.0x5556f6694fa0))))))
  (define #<identifier caaaar.0x5556f6695f00> (lambda[0x5556f6697100] caaaar (x.0x5556f66956e0)
   (primcall car (primcall car (primcall car (primcall car (lref x.0x5556f66956e0)))))))
  (define #<identifier caaadr.0x5556f6696640> (lambda[0x5556f6697930] caaadr (x.0x5556f6695e20)
   (primcall car (primcall car (primcall car (primcall cdr (lref x.0x5556f6695e20)))))))
  (define #<identifier caadar.0x5556f6696e70> (lambda[0x5556f6698160] caadar (x.0x5556f6696560)
   (primcall car (primcall car (primcall cdr (primcall car (lref x.0x5556f6696560)))))))
  (define #<identifier caaddr.0x5556f6697710> (lambda[0x5556f6698990] caaddr (x.0x5556f6696d20)
   (primcall car (primcall car (primcall cdr (primcall cdr (lref x.0x5556f6696d20)))))))
  (define #<identifier cadaar.0x5556f6697f40> (lambda[0x5556f66991c0] cadaar (x.0x5556f6696e00)
   (primcall car (primcall cdr (primcall car (primcall car (lref x.0x5556f6696e00)))))))
  (define #<identifier cadadr.0x5556f6698770> (lambda[0x5556f66999f0] cadadr (x.0x5556f66976a0)
   (primcall car (primcall cdr (primcall car (primcall cdr (lref x.0x5556f66976a0)))))))
  (define #<identifier caddar.0x5556f6698fa0> (lambda[0x5556f669a220] caddar (x.0x5556f6697ed0)
   (primcall car (primcall cdr (primcall cdr (primcall car (lref x.0x5556f6697ed0)))))))
  (define #<identifier cadddr.0x5556f66997d0> (lambda[0x5556f669aa50] cadddr (x.0x5556f6698700)
   (primcall car (primcall cdr (primcall cdr (primcall cdr (lref x.0x5556f6698700)))))))
  (define #<identifier cdaaar.0x5556f669a000> (lambda[0x5556f669b280] cdaaar (x.0x5556f6698f30)
   (primcall cdr (primcall car (primcall car (primcall car (lref x.0x5556f6698f30)))))))
  (define #<identifier cdaadr.0x5556f669a830> (lambda[0x5556f669bab0] cdaadr (x.0x5556f6699760)
   (primcall cdr (primcall car (primcall car (primcall cdr (lref x.0x5556f6699760)))))))
  (define #<identifier cdadar.0x5556f669b060> (lambda[0x5556f669c2e0] cdadar (x.0x5556f6699f90)
   (primcall cdr (primcall car (primcall cdr (primcall car (lref x.0x5556f6699f90)))))))
  (define #<identifier cdaddr.0x5556f669b890> (lambda[0x5556f664d590] cdaddr (x.0x5556f669a7c0)
   (primcall cdr (primcall car (primcall cdr (primcall cdr (lref x.0x5556f669a7c0)))))))
  (define #<identifier cddaar.0x5556f669c0c0> (lambda[0x5556f665b8f0] cddaar (x.0x5556f669aff0)
   (primcall cdr (primcall cdr (primcall car (primcall car (lref x.0x5556f669aff0)))))))
  (define #<identifier cddadr.0x5556f665f620> (lambda[0x5556f66471d0] cddadr (x.0x5556f669b820)
   (primcall cdr (primcall cdr (primcall car (primcall cdr (lref x.0x5556f669b820)))))))
  (define #<identifier cdddar.0x5556f664e640> (lambda[0x5556f6647dd0] cdddar (x.0x5556f666aff0)
   (primcall cdr (primcall cdr (primcall cdr (primcall car (lref x.0x5556f666aff0)))))))
  (define #<identifier cddddr.0x5556f6692bd0> (lambda[0x5556f66485e0] cddddr (x.0x5556f6656240)
   (primcall cdr (primcall cdr (primcall cdr (primcall cdr (lref x.0x5556f6656240)))))))
  (define #<identifier pair?.0x5556f6647bb0> (lambda[0x5556f6648980] pair? (x.0x5556f664e5d0)
   (primcall pair? (lref x.0x5556f664e5d0))))
  (define #<identifier null?.0x5556f666b030> (lambda[0x5556f669fb50] null? (x.0x5556f6648350)
   (primcall null? (lref x.0x5556f6648350))))
  (define #<identifier vector?.0x5556f6665b40> (lambda[0x5556f66a00b0] vector? (x.0x5556f669fb10)
   (primcall vector? (lref x.0x5556f669fb10))))
  (define #<identifier string?.0x5556f669fa30> (lambda[0x5556f66a0610] string? (x.0x5556f66a0070)
   (primcall string? (lref x.0x5556f66a0070))))
  (define #<identifier number?.0x5556f669ff90> (lambda[0x5556f66a0b70] number? (x.0x5556f66a05d0)
   (primcall number? (lref x.0x5556f66a05d0))))
  (define #<identifier boolean?.0x5556f66a04f0> (lambda[0x5556f66a10d0] boolean? (x.0x5556f66a0b30)
   (call (gref #<identifier boolean?.0x5556f66a1020>)
    (lref x.0x5556f66a0b30))))
  (define #<identifier symbol?.0x5556f66a0fb0> (lambda[0x5556f66a17e0] symbol? (x.0x5556f66a14b0)
   (primcall symbol? (lref x.0x5556f66a14b0))))
  (define #<identifier char?.0x5556f66a1090> (lambda[0x5556f66a1d40] char? (x.0x5556f66a16c0)
   (primcall char? (lref x.0x5556f66a16c0))))
  (define #<identifier +.0x5556f66a15e0> (lambda[0x5556f66a4670] + (args.0x5556f66a1d00)
   (fix ([loop.0x5556f66a3670 (lambda[0x5556f66a42c0]  (args.0x5556f66a36b0)
     (acc.0x5556f66a3720)
     (if (primcall null? (lref args.0x5556f66a36b0))
      (lref acc.0x5556f66a3720)
      (call (lref loop.0x5556f66a3670)
       (primcall cdr (lref args.0x5556f66a36b0))
       (primcall + (primcall car (lref args.0x5556f66a36b0))
       (lref acc.0x5556f66a3720)))))])
    (call (lref loop.0x5556f66a3670)
     (lref args.0x5556f66a1d00)
     (const 0)))))
  (define #<identifier -.0x5556f66a3630> (lambda[0x5556f66a5be0] - (args.0x5556f66a39e0)
   (fix ([loop.0x5556f66a3a50 (lambda[0x5556f66a5830]  (args.0x5556f66a3ac0)
     (acc.0x5556f66a3c40)
     (if (primcall null? (lref args.0x5556f66a3ac0))
      (lref acc.0x5556f66a3c40)
      (call (lref loop.0x5556f66a3a50)
       (primcall cdr (lref args.0x5556f66a3ac0))
       (primcall - (lref acc.0x5556f66a3c40)
       (primcall car (lref args.0x5556f66a3ac0))))))])
    (call (lref loop.0x5556f66a3a50)
     (lref args.0x5556f66a39e0)
     (const 0)))))
  (define #<identifier *.0x5556f66a3e60> (lambda[0x5556f66a7150] * (args.0x5556f66a5030)
   (fix ([loop.0x5556f66a50a0 (lambda[0x5556f66a6da0]  (args.0x5556f66a5110)
     (acc.0x5556f66a51b0)
     (if (primcall null? (lref args.0x5556f66a5110))
      (lref acc.0x5556f66a51b0)
      (call (lref loop.0x5556f66a50a0)
       (primcall cdr (lref args.0x5556f66a5110))
       (primcall * (primcall car (lref args.0x5556f66a5110))
       (lref acc.0x5556f66a51b0)))))])
    (call (lref loop.0x5556f66a50a0)
     (lref args.0x5556f66a5030)
     (const 1)))))
  (define #<identifier /.0x5556f66a53d0> (lambda[0x5556f66a86c0] / (args.0x5556f66a65a0)
   (fix ([loop.0x5556f66a6610 (lambda[0x5556f66a8310]  (args.0x5556f66a6680)
     (acc.0x5556f66a6720)
     (if (primcall null? (lref args.0x5556f66a6680))
      (lref acc.0x5556f66a6720)
      (call (lref loop.0x5556f66a6610)
       (primcall cdr (lref args.0x5556f66a6680))
       (primcall / (lref acc.0x5556f66a6720)
       (primcall car (lref args.0x5556f66a6680))))))])
    (call (lref loop.0x5556f66a6610)
     (lref args.0x5556f66a65a0)
     (const 1)))))
  (define #<identifier make-nary-comparison.0x5556f66a6940> (lambda[0x5556f66ad980] make-nary-comparison (name.0x5556f66a7b10)
   (binop.0x5556f66a8030)
   (lambda[0x5556f66ad820]  (a.0x5556f66a7bf0)
    (b.0x5556f66a7c90)
    (rest.0x5556f66ab8b0)
    (seq (call (gref #<identifier print.0x5556f66aba80>)
      (lref a.0x5556f66a7bf0)
      (lref b.0x5556f66a7c90)
      (lref rest.0x5556f66ab8b0))
     (if (primcall null? (lref rest.0x5556f66ab8b0))
      (call (lref binop.0x5556f66a8030)
       (lref a.0x5556f66a7bf0)
       (lref b.0x5556f66a7c90))
      (if (call (lref binop.0x5556f66a8030)
        (lref a.0x5556f66a7bf0)
        (lref b.0x5556f66a7c90))
       (fix ([loop.0x5556f66ac240 (lambda[0x5556f66ad2b0]  (first.0x5556f66ac280)
         (rest.0x5556f66ac2f0)
         (if (primcall null? (lref rest.0x5556f66ac2f0))
          (const #t)
          (if (call (lref binop.0x5556f66a8030)
            (lref first.0x5556f66ac280)
            (primcall car (lref rest.0x5556f66ac2f0)))
           (call (lref loop.0x5556f66ac240)
            (primcall car (lref rest.0x5556f66ac2f0))
            (primcall cdr (lref rest.0x5556f66ac2f0)))
           (const #f))))])
        (call (lref loop.0x5556f66ac240)
         (lref b.0x5556f66a7c90)
         (lref rest.0x5556f66ab8b0)))
       (const #f)))))))
  (define #<identifier =.0x5556f66ac540> (call (gref #<identifier make-nary-comparison.0x5556f66ac5b0>)
   (const =)
   (lambda[0x5556f66ade50]  (a.0x5556f66acf60)
    (b.0x5556f66acd40)
    (primcall = (lref a.0x5556f66acf60) (lref b.0x5556f66acd40)))))
  (define #<identifier <.0x5556f66a6a20> (call (gref #<identifier make-nary-comparison.0x5556f66abbc0>)
   (const <)
   (lambda[0x5556f66ae5b0]  (a.0x5556f66aca00)
    (b.0x5556f66aca70)
    (primcall < (lref a.0x5556f66aca00) (lref b.0x5556f66aca70)))))
  (define #<identifier >.0x5556f66ac620> (call (gref #<identifier make-nary-comparison.0x5556f66a7aa0>)
   (const >)
   (lambda[0x5556f66aeee0]  (a.0x5556f66ac200)
    (b.0x5556f66aeb10)
    (primcall > (lref a.0x5556f66ac200) (lref b.0x5556f66aeb10)))))
  (define #<identifier <=.0x5556f66a7b80> (call (gref #<identifier make-nary-comparison.0x5556f66aec70>)
   (const <=)
   (lambda[0x5556f66af850]  (a.0x5556f66af440)
    (b.0x5556f66af480)
    (primcall <= (lref a.0x5556f66af440) (lref b.0x5556f66af480)))))
  (define #<identifier >=.0x5556f66aed50> (call (gref #<identifier make-nary-comparison.0x5556f66af5e0>)
   (const >=)
   (lambda[0x5556f66b01c0]  (a.0x5556f66afdb0)
    (b.0x5556f66afdf0)
    (primcall >= (lref a.0x5556f66afdb0) (lref b.0x5556f66afdf0)))))
  (define #<identifier list->vector.0x5556f66af6c0> (lambda[0x5556f66b2d10] list->vector (list.0x5556f66b0030)
   (let let
     (len.0x5556f66b1010 (primcall length (lref list.0x5556f66b0030)))
    (let let
      (vec.0x5556f66b12f0 (primcall make-vector (lref len.0x5556f66b1010)))
     (fix ([loop.0x5556f66b1720 (lambda[0x5556f66b28a0]  (list.0x5556f66b1760)
       (i.0x5556f66b17d0)
       (if (primcall null? (lref list.0x5556f66b1760))
        (lref vec.0x5556f66b12f0)
        (seq (primcall vector-set! (lref vec.0x5556f66b12f0)
         (lref i.0x5556f66b17d0)
         (primcall car (lref list.0x5556f66b1760)))
         (call (lref loop.0x5556f66b1720)
          (primcall cdr (lref list.0x5556f66b1760))
          (primcall + (lref i.0x5556f66b17d0) (const 1))))))])
      (call (lref loop.0x5556f66b1720)
       (lref list.0x5556f66b0030)
       (const 0)))))))
  (define #<identifier vector->list.0x5556f66b16e0> (lambda[0x5556f66b3920] vector->list (vec.0x5556f66b1a90)
   (fix ([loop.0x5556f66b2330 (lambda[0x5556f66b3370]  (vec.0x5556f66b10b0)
     (i.0x5556f66b1390)
     (len.0x5556f66b1b00)
     (acc.0x5556f66b1dd0)
     (if (primcall = (lref i.0x5556f66b1390)
      (lref len.0x5556f66b1b00))
      (call (gref #<identifier reverse.0x5556f66aa0e0>)
       (lref acc.0x5556f66b1dd0))
      (call (lref loop.0x5556f66b2330)
       (lref vec.0x5556f66b10b0)
       (primcall + (lref i.0x5556f66b1390) (const 1))
       (lref len.0x5556f66b1b00)
       (primcall cons (primcall vector-ref (lref vec.0x5556f66b10b0)
       (lref i.0x5556f66b1390))
       (lref acc.0x5556f66b1dd0)))))])
    (call (lref loop.0x5556f66b2330)
     (lref vec.0x5556f66b1a90)
     (const 0)
     (primcall vector-length (lref vec.0x5556f66b1a90))
     (const ())))))
  (define #<identifier length.0x5556f66b1b70> (lambda[0x5556f66b4d90] length (list.0x5556f66b2550)
   (fix ([loop.0x5556f66b1e40 (lambda[0x5556f66b4a00]  (list.0x5556f66aa070)
     (len.0x5556f66aa180)
     (if (primcall null? (lref list.0x5556f66aa070))
      (lref len.0x5556f66aa180)
      (call (lref loop.0x5556f66b1e40)
       (primcall cdr (lref list.0x5556f66aa070))
       (primcall + (lref len.0x5556f66aa180) (const 1)))))])
    (call (lref loop.0x5556f66b1e40)
     (lref list.0x5556f66b2550)
     (const 0)))))
  (define #<identifier map.0x5556f66aa6e0> (lambda[0x5556f66b6830] map (proc.0x5556f66aa600)
   (list.0x5556f66b4720)
   (fix ([loop.0x5556f66b44d0 (lambda[0x5556f66b64a0]  (list.0x5556f66b5670)
     (acc.0x5556f66b56e0)
     (if (primcall null? (lref list.0x5556f66b5670))
      (call (gref #<identifier reverse.0x5556f66b5a80>)
       (lref acc.0x5556f66b56e0))
      (call (lref loop.0x5556f66b44d0)
       (primcall cdr (lref list.0x5556f66b5670))
       (primcall cons (call (lref proc.0x5556f66aa600)
        (primcall car (lref list.0x5556f66b5670)))
       (lref acc.0x5556f66b56e0)))))])
    (call (lref loop.0x5556f66b44d0)
     (lref list.0x5556f66b4720)
     (const ())))))
  (define #<identifier call-with-values.0x5556f66aa720> (lambda[0x5556f66a8fc0] call-with-values (producer.0x5556f66b59a0)
   (consumer.0x5556f66b6080)
   (let-values (results.0x5556f66a9d40)
     (call (lref producer.0x5556f66b59a0) )
    (call (gref #<identifier apply.0x5556f66a9eb0>)
     (lref consumer.0x5556f66b6080)
     (lref results.0x5556f66a9d40)))))
  (define #<identifier *here*.0x5556f66a2cd0> (primcall list (const #f)))
  (define #<identifier call-with-current-continuation.0x5556f66b4570> (lambda[0x5556f66b9260] call-with-current-continuation (proc.0x5556f66a9e40)
   (let let
     (here.0x5556f66b7af0 (gref *here*))
    (call (gref #<identifier %call/cc.0x5556f66b7cf0>)
     (lambda[0x5556f66a9c20]  (cont.0x5556f66b7e00)
      (call (lref proc.0x5556f66a9e40)
       (lambda[0x5556f66a8df0]  (results.0x5556f66b7fd0)
        (seq (call (gref #<identifier reroot!.0x5556f66b8140>)
          (lref here.0x5556f66b7af0))
         (if (primcall pair? (lref results.0x5556f66b7fd0))
          (if (primcall null? (primcall cdr (lref results.0x5556f66b7fd0)))
           (call (lref cont.0x5556f66b7e00)
            (primcall car (lref results.0x5556f66b7fd0)))
           (const #<undefined>))
          (const #<undefined>))
         (call (gref #<identifier apply.0x5556f66b81b0>)
          (lref cont.0x5556f66b7e00)
          (lref results.0x5556f66b7fd0))))))))))
  (define #<identifier call/cc.0x5556f66b80d0> (primref call-with-current-continuation))
  (define #<identifier reroot!.0x5556f66b83d0> (lambda[0x5556f668d3f0] reroot! (there.0x5556f668a800)
   (fix ([reroot-loop.0x5556f668abb0 (lambda[0x5556f668d0d0]  (there.0x5556f668ad80)
     (if (primcall not (primcall eq? (lref there.0x5556f668ad80)
      (gref *here*)))
      (seq (call (lref reroot-loop.0x5556f668abb0)
        (primcall cdr (lref there.0x5556f668ad80)))
       (let let
         (old-pair.0x5556f668b520 (primcall car (lref there.0x5556f668ad80)))
        (let let
          (before.0x5556f668b950 (primcall car (lref old-pair.0x5556f668b520)))
          (after.0x5556f668b9c0 (primcall cdr (lref old-pair.0x5556f668b520)))
         (seq (primcall set-car! (gref *here*)
          (primcall cons (lref after.0x5556f668b9c0)
          (lref before.0x5556f668b950)))
          (primcall set-cdr! (gref *here*)
          (lref there.0x5556f668ad80))
          (primcall set-car! (lref there.0x5556f668ad80) (const #f))
          (primcall set-cdr! (lref there.0x5556f668ad80) (const ()))
          (gset #<identifier *here*.0x5556f668cbe0> (lref there.0x5556f668ad80))
          (call (lref before.0x5556f668b950) )))))
      (const #<undefined>)))])
    (call (lref reroot-loop.0x5556f668abb0)
     (lref there.0x5556f668a800)))))
  (define #<identifier dynamic-wind.0x5556f668b290> (lambda[0x5556f668eb70] dynamic-wind (before.0x5556f668b910)
   (thunk.0x5556f668bcc0)
   (after.0x5556f668c980)
   (let let
     (here.0x5556f668ba30 (gref *here*))
    (let let
      (there.0x5556f668c040 (primcall list (const #f)))
     (seq (call (lref before.0x5556f668b910) )
      (primcall set-car! (gref *here*)
      (primcall cons (lref after.0x5556f668c980)
      (lref before.0x5556f668b910)))
      (primcall set-cdr! (gref *here*) (lref there.0x5556f668c040))
      (gset #<identifier *here*.0x5556f66b8a10> (lref there.0x5556f668c040))
      (let let
        (result.0x5556f66b7f30 (call (lref thunk.0x5556f668bcc0) ))
       (seq (call (gref #<identifier reroot!.0x5556f668b000>)
         (lref here.0x5556f668ba30))
        (lref result.0x5556f66b7f30))))))))
  (define #<identifier unhandled-exception-error.0x5556f668b5c0> (lambda[0x5556f668ee90] unhandled-exception-error (val.0x5556f668bfd0)
   (call (gref #<identifier %raise.0x5556f668af90>)
    (lref val.0x5556f668bfd0))))
  (define #<identifier *basic-exception-handlers*.0x5556f668a930> (primcall list (gref unhandled-exception-error)))
  (define #<identifier *current-exception-handlers*.0x5556f668ace0> (gref *basic-exception-handlers*))
  (define #<identifier with-exception-handler.0x5556f668b630> (lambda[0x5556f668fb20] with-exception-handler (handler.0x5556f668c1c0)
   (thunk.0x5556f668c4c0)
   (call (gref #<identifier with-exception-handlers.0x5556f668b220>)
    (primcall cons (lref handler.0x5556f668c1c0)
    (gref *current-exception-handlers*))
    (lref thunk.0x5556f668c4c0))))
  (define #<identifier with-exception-handlers.0x5556f668b070> (lambda[0x5556f6691660] with-exception-handlers (new-handlers.0x5556f668f810)
   (thunk.0x5556f6690550)
   (let let
     (previous-handlers.0x5556f6690760 (gref *current-exception-handlers*))
     (new-handlers.0x5556f66907d0 (if (primcall null? (lref new-handlers.0x5556f668f810))
      (gref *basic-exception-handlers*)
      (lref new-handlers.0x5556f668f810)))
    (primcall dynamic-wind (lambda[0x5556f6691040]  
     (gset #<identifier *current-exception-handlers*.0x5556f6690f20> (lref new-handlers.0x5556f66907d0)))
    (lref thunk.0x5556f6690550)
    (lambda[0x5556f6691420]  
     (gset #<identifier *current-exception-handlers*.0x5556f6691300> (lref previous-handlers.0x5556f6690760)))))))
  (define #<identifier raise.0x5556f66906b0> (lambda[0x5556f66cc630] raise (obj.0x5556f6690840)
   (let let
     (handlers.0x5556f6690eb0 (gref *current-exception-handlers*))
    (call (gref #<identifier with-exception-handlers.0x5556f668baa0>)
     (primcall cdr (lref handlers.0x5556f6690eb0))
     (lambda[0x5556f66cc3f0]  
      (seq (call (primcall car (lref handlers.0x5556f6690eb0))
        (lref obj.0x5556f6690840))
       (call (gref #<identifier %raise.0x5556f6692220>)
        (const "handler returned"))))))))
  (define #<identifier eval-core.0x5556f6690cd0> (const #f))
  (fix ([default-find-global.0x5556f6740160 (lambda[0x5556f6773d30]  (name.0x5556f6772250)
    (call (gref #<identifier environment-get-cell.0x5556f6772b60>)
     (call (gref #<identifier interaction-environment.0x5556f6772a80>)
     )
     (lref name.0x5556f6772250)))])
   ([interpret/make-proc.0x5556f6740120 (lambda[0x5556f67739a0]  (expr.0x5556f676d930)
    (env.0x5556f676dfa0)
    (find-global.0x5556f676de70)
    (let let
      (args.0x5556f676ebe0 (primcall vector-ref (lref expr.0x5556f676d930)
      (const 1)))
      (optarg.0x5556f67684e0 (primcall vector-ref (lref expr.0x5556f676d930)
      (const 2)))
      (body.0x5556f676be00 (call (lref interpret/preprocess.0x5556f673f9c0)
       (primcall vector-ref (lref expr.0x5556f676d930) (const 3))
       (call (lref interpret/extend-env.0x5556f673faf0)
        (lref env.0x5556f676dfa0)
        (call (gref #<identifier vector->list.0x5556f676af70>)
         (primcall vector-ref (lref expr.0x5556f676d930) (const 1))))
       (lref find-global.0x5556f676de70)))
     (if (lref optarg.0x5556f67684e0)
      (call (lref interpret/lambda-dot.0x5556f67400e0)
       (primcall vector-length (lref args.0x5556f676ebe0))
       (lref body.0x5556f676be00))
      (if (primcall = (primcall vector-length (lref args.0x5556f676ebe0))
       (const 0))
       (call (lref interpret/lambda0.0x5556f673fed0)
        (lref body.0x5556f676be00))
       (if (primcall = (primcall vector-length (lref args.0x5556f676ebe0))
        (const 1))
        (call (lref interpret/lambda1.0x5556f673fc80)
         (lref body.0x5556f676be00))
        (if (primcall = (primcall vector-length (lref args.0x5556f676ebe0))
         (const 2))
         (call (lref interpret/lambda2.0x5556f673fcc0)
          (lref body.0x5556f676be00))
         (if (primcall = (primcall vector-length (lref args.0x5556f676ebe0))
          (const 3))
          (call (lref interpret/lambda3.0x5556f6740020)
           (lref body.0x5556f676be00))
          (if (primcall = (primcall vector-length (lref args.0x5556f676ebe0))
           (const 4))
           (call (lref interpret/lambda4.0x5556f6740060)
            (lref body.0x5556f676be00))
           (call (lref interpret/lambda-n.0x5556f67400a0)
            (primcall vector-length (lref args.0x5556f676ebe0))
            (lref body.0x5556f676be00))))))))))])
   ([interpret/lambda-dot.0x5556f67400e0 (lambda[0x5556f676f8a0]  (n.0x5556f67696e0)
    (body.0x5556f676a250)
    (lambda[0x5556f676f740]  (renv.0x5556f676a620)
     (fix ([self.0x5556f6767fb0 (lambda[0x5556f676f500]  (args.0x5556f676bc90)
       (let let
         (v.0x5556f676be40 (primcall make-vector (primcall + (lref n.0x5556f67696e0)
         (const 2))
         (primcall undefined )))
        (seq (call (gref #<identifier limit.0x5556f676c570>)
          (primcall + (lref n.0x5556f67696e0) (const 1)))
         (primcall vector-set! (lref v.0x5556f676be40)
         (const 0)
         (lref self.0x5556f6767fb0))
         (fix ([loop.0x5556f676cc90 (lambda[0x5556f676f050]  (argnum.0x5556f676ccd0)
           (argtail.0x5556f676cd40)
           (if (primcall = (lref argnum.0x5556f676ccd0) (gref limit))
            (seq (primcall vector-set! (lref v.0x5556f676be40)
             (gref argunum)
             (lref argtail.0x5556f676cd40))
             (call (lref body.0x5556f676a250)
              (primcall cons (lref v.0x5556f676be40) (gref env))))
            (if (primcall pair? (lref argtail.0x5556f676cd40))
             (seq (primcall vector-set! (lref v.0x5556f676be40)
              (lref argnum.0x5556f676ccd0)
              (primcall car (lref argtail.0x5556f676cd40)))
              (call (lref loop.0x5556f676cc90)
               (primcall + (lref argnum.0x5556f676ccd0) (const 1))
               (primcall cdr (lref argtail.0x5556f676cd40))))
             (primcall error (const "too few arguments")
             (lref n.0x5556f67696e0)))))])
          (call (lref loop.0x5556f676cc90)
           (const 1)
           (lref args.0x5556f676bc90))))))])
      (lref self.0x5556f6767fb0))))])
   ([interpret/lambda-n.0x5556f67400a0 (lambda[0x5556f676b7d0]  (n.0x5556f6766080)
    (body.0x5556f6766f90)
    (lambda[0x5556f676b670]  (renv.0x5556f67690e0)
     (fix ([self.0x5556f676a290 (lambda[0x5556f676b430]  (args.0x5556f676a4b0)
       (if (primcall < (primcall length (lref args.0x5556f676a4b0))
        (lref n.0x5556f6766080))
        (primcall error (const "too few arguments")
        (lref n.0x5556f6766080))
        (call (lref body.0x5556f6766f90)
         (primcall cons (call (gref #<identifier list->vector.0x5556f676adb0>)
          (primcall cons (lref self.0x5556f676a290)
          (lref args.0x5556f676a4b0)))
         (gref env)))))])
      (lref self.0x5556f676a290))))])
   ([interpret/lambda4.0x5556f6740060 (lambda[0x5556f6769fa0]  (body.0x5556f67650f0)
    (lambda[0x5556f6769e40]  (renv.0x5556f67673f0)
     (fix ([self.0x5556f6768f60 (lambda[0x5556f6769c00]  (a0.0x5556f67692a0)
       (a1.0x5556f67692e0)
       (a2.0x5556f6769320)
       (a3.0x5556f6769360)
       (call (lref body.0x5556f67650f0)
        (primcall cons (primcall vector (lref self.0x5556f6768f60)
        (lref a0.0x5556f67692a0)
        (lref a1.0x5556f67692e0)
        (lref a2.0x5556f6769320)
        (lref a3.0x5556f6769360))
        (lref renv.0x5556f67673f0))))])
      (lref self.0x5556f6768f60))))])
   ([interpret/lambda3.0x5556f6740020 (lambda[0x5556f6768d10]  (body.0x5556f6764fe0)
    (lambda[0x5556f6768bb0]  (renv.0x5556f6766410)
     (fix ([self.0x5556f6767e30 (lambda[0x5556f6768970]  (a0.0x5556f6768110)
       (a1.0x5556f6768150)
       (a2.0x5556f6768190)
       (call (lref body.0x5556f6764fe0)
        (primcall cons (primcall vector (lref self.0x5556f6767e30)
        (lref a0.0x5556f6768110)
        (lref a1.0x5556f6768150)
        (lref a2.0x5556f6768190))
        (lref renv.0x5556f6766410))))])
      (lref self.0x5556f6767e30))))])
   ([interpret/lambda2.0x5556f673fcc0 (lambda[0x5556f6767bb0]  (body.0x5556f67618e0)
    (lambda[0x5556f6767a50]  (renv.0x5556f67653b0)
     (fix ([self.0x5556f6766e10 (lambda[0x5556f6767810]  (a0.0x5556f6767090)
       (a1.0x5556f67670d0)
       (call (lref body.0x5556f67618e0)
        (primcall cons (primcall vector (lref self.0x5556f6766e10)
        (lref a0.0x5556f6767090)
        (lref a1.0x5556f67670d0))
        (lref renv.0x5556f67653b0))))])
      (lref self.0x5556f6766e10))))])
   ([interpret/lambda1.0x5556f673fc80 (lambda[0x5556f6766b60]  (body.0x5556f6763590)
    (lambda[0x5556f6766a00]  (renv.0x5556f6765020)
     (fix ([self.0x5556f6765f00 (lambda[0x5556f67667c0]  (a0.0x5556f6766120)
       (call (lref body.0x5556f6763590)
        (primcall cons (primcall vector (lref self.0x5556f6765f00)
        (lref a0.0x5556f6766120))
        (lref renv.0x5556f6765020))))])
      (lref self.0x5556f6765f00))))])
   ([interpret/lambda0.0x5556f673fed0 (lambda[0x5556f6765b70]  (body.0x5556f6763140)
    (lambda[0x5556f6765a10]  (renv.0x5556f675db90)
     (seq (fix ([self.0x5556f6765060 (lambda[0x5556f67656f0]  
        (call (lref body.0x5556f6763140)
         (primcall cons (primcall vector (lref self.0x5556f6765060))
         (lref renv.0x5556f675db90))))])
       (const #<undefined>))
      (gref self))))])
   ([interpret/if.0x5556f673fe90 (lambda[0x5556f6764e80]  (test.0x5556f675e950)
    (consequent.0x5556f6762700)
    (alternative.0x5556f67630d0)
    (lambda[0x5556f6764d20]  (renv.0x5556f6763ca0)
     (if (call (lref test.0x5556f675e950) (lref renv.0x5556f6763ca0))
      (call (lref consequent.0x5556f6762700)
       (lref renv.0x5556f6763ca0))
      (call (lref alternative.0x5556f67630d0)
       (lref renv.0x5556f6763ca0)))))])
   ([interpret/sequence.0x5556f673fe50 (lambda[0x5556f6764490]  (exprs.0x5556f6761800)
    (lambda[0x5556f6764330]  (renv.0x5556f675e8e0)
     (fix ([loop.0x5556f6761410 (lambda[0x5556f6763fb0]  (exprs.0x5556f6763000)
       (if (primcall null? (primcall cdr (lref exprs.0x5556f6763000)))
        (call (primcall car (lref exprs.0x5556f6763000))
         (lref renv.0x5556f675e8e0))
        (seq (call (primcall car (lref exprs.0x5556f6763000))
          (lref renv.0x5556f675e8e0))
         (call (lref loop.0x5556f6761410)
          (primcall cdr (lref exprs.0x5556f6763000))))))])
      (call (lref loop.0x5556f6761410)
       (lref exprs.0x5556f6761800)))))])
   ([interpret/set-lexical.0x5556f673fe10 (lambda[0x5556f6762ea0]  (rib.0x5556f6760c30)
    (offset.0x5556f67611c0)
    (expr.0x5556f6761870)
    (lambda[0x5556f6762d40]  (env0.0x5556f67612e0)
     (fix ([loop.0x5556f6760550 (lambda[0x5556f6762970]  (rib.0x5556f6760680)
       (env.0x5556f674a240)
       (if (primcall = (lref rib.0x5556f6760680) (const 0))
        (primcall vector-set! (primcall car (lref env.0x5556f674a240))
        (lref offset.0x5556f67611c0)
        (call (lref expr.0x5556f6761870) (lref env0.0x5556f67612e0)))
        (call (lref loop.0x5556f6760550)
         (primcall - (lref rib.0x5556f6760680) (const 1))
         (primcall cdr (lref env.0x5556f674a240)))))])
      (call (lref loop.0x5556f6760550)
       (lref rib.0x5556f6760c30)
       (lref env0.0x5556f67612e0)))))])
   ([interpret/lexical.0x5556f673fdd0 (lambda[0x5556f6761d80]  (rib.0x5556f675dd50)
    (offset.0x5556f675e530)
    (if (primcall = (lref rib.0x5556f675dd50) (const 0))
     (call (lref interpret/lexical0.0x5556f673fc00)
      (lref offset.0x5556f675e530))
     (if (primcall = (lref rib.0x5556f675dd50) (const 1))
      (call (lref interpret/lexical1.0x5556f673fc40)
       (lref offset.0x5556f675e530))
      (if (primcall = (lref rib.0x5556f675dd50) (const 2))
       (call (lref interpret/lexical2.0x5556f673fd10)
        (lref offset.0x5556f675e530))
       (if (primcall = (lref rib.0x5556f675dd50) (const 3))
        (call (lref interpret/lexical3.0x5556f673fd50)
         (lref offset.0x5556f675e530))
        (call (lref interpret/lexical-n.0x5556f673fd90)
         (lref rib.0x5556f675dd50)
         (lref offset.0x5556f675e530)))))))])
   ([interpret/lexical-n.0x5556f673fd90 (lambda[0x5556f675fb30]  (rib.0x5556f675c960)
    (offset.0x5556f675d2c0)
    (lambda[0x5556f675f9d0]  (env0.0x5556f675e400)
     (fix ([loop.0x5556f675e5e0 (lambda[0x5556f675f5e0]  (rib.0x5556f675e620)
       (env.0x5556f675e690)
       (if (primcall = (lref rib.0x5556f675e620) (const 0))
        (primcall vector-ref (primcall car (lref env.0x5556f675e690))
        (lref offset.0x5556f675d2c0))
        (call (lref loop.0x5556f675e5e0)
         (primcall - (lref rib.0x5556f675e620) (const 1))
         (primcall cdr (lref env.0x5556f675e690)))))])
      (call (lref loop.0x5556f675e5e0)
       (lref rib.0x5556f675c960)
       (lref env0.0x5556f675e400)))))])
   ([interpret/lexical3.0x5556f673fd50 (lambda[0x5556f675e150]  (offset.0x5556f675b900)
    (lambda[0x5556f675dff0]  (renv.0x5556f675d480)
     (primcall vector-ref (primcall cadddr (lref renv.0x5556f675d480))
     (lref offset.0x5556f675b900))))])
   ([interpret/lexical2.0x5556f673fd10 (lambda[0x5556f675d880]  (offset.0x5556f67515e0)
    (lambda[0x5556f675d720]  (renv.0x5556f675cb20)
     (primcall vector-ref (primcall caddr (lref renv.0x5556f675cb20))
     (lref offset.0x5556f67515e0))))])
   ([interpret/lexical1.0x5556f673fc40 (lambda[0x5556f675cf20]  (offset.0x5556f675ab00)
    (lambda[0x5556f675cdc0]  (renv.0x5556f675c250)
     (primcall vector-ref (primcall cadr (lref renv.0x5556f675c250))
     (lref offset.0x5556f675ab00))))])
   ([interpret/lexical0.0x5556f673fc00 (lambda[0x5556f675c650]  (offset.0x5556f675a820)
    (lambda[0x5556f675c4f0]  (renv.0x5556f67559f0)
     (primcall vector-ref (primcall car (lref renv.0x5556f67559f0))
     (lref offset.0x5556f675a820))))])
   ([interpret/set-global.0x5556f673fbc0 (lambda[0x5556f675bec0]  (name.0x5556f6751c90)
    (expr.0x5556f674d9a0)
    (find-global.0x5556f6756100)
    (let let
      (cell.0x5556f675add0 (call (lref find-global.0x5556f6756100)
       (lref name.0x5556f6751c90)))
     (lambda[0x5556f675bcf0]  (renv.0x5556f67594e0)
      (call (gref #<identifier variable-ref-set-value!.0x5556f675b970>)
       (lref cell.0x5556f675add0)
       (call (lref expr.0x5556f674d9a0)
        (lref renv.0x5556f67594e0))))))])
   ([interpret/global.0x5556f673fb80 (lambda[0x5556f675b2f0]  (name.0x5556f6758980)
    (find-global.0x5556f6759160)
    (let let
      (cell.0x5556f6751010 (call (lref find-global.0x5556f6759160)
       (lref name.0x5556f6758980)))
     (lambda[0x5556f675b120]  (renv.0x5556f674d920)
      (let let
        (v.0x5556f67561a0 (call (gref #<identifier variable-ref-value.0x5556f6750f70>)
         (lref cell.0x5556f6751010)))
       (if (primcall undefined? (lref v.0x5556f67561a0))
        (primcall error (const "undefined global variable")
        (lref name.0x5556f6758980))
        (lref v.0x5556f67561a0))))))])
   ([interpret/extend-env.0x5556f673faf0 (lambda[0x5556f675a430]  (env.0x5556f6758510)
    (names.0x5556f6758ab0)
    (primcall cons (lref names.0x5556f6758ab0)
    (lref env.0x5556f6758510)))])
   ([interpret/var-address.0x5556f673fab0 (lambda[0x5556f675a110]  (name.0x5556f6755f60)
    (env.0x5556f67560c0)
    (fix ([r-loop.0x5556f67564e0 (lambda[0x5556f6759d40]  (env.0x5556f6756f70)
      (i.0x5556f674d190)
      (if (primcall null? (lref env.0x5556f6756f70))
       (const #f)
       (fix ([a-loop.0x5556f6750380 (lambda[0x5556f6759860]  (rib.0x5556f674d0d0)
         (j.0x5556f674cd80)
         (if (primcall null? (lref rib.0x5556f674d0d0))
          (call (lref r-loop.0x5556f67564e0)
           (primcall cdr (lref env.0x5556f6756f70))
           (primcall + (lref i.0x5556f674d190) (const 1)))
          (if (primcall eq? (primcall car (lref rib.0x5556f674d0d0))
           (lref name.0x5556f6755f60))
           (primcall cons (lref i.0x5556f674d190)
           (lref j.0x5556f674cd80))
           (call (lref a-loop.0x5556f6750380)
            (primcall cdr (lref rib.0x5556f674d0d0))
            (primcall + (lref j.0x5556f674cd80) (const 1))))))])
        (call (lref a-loop.0x5556f6750380)
         (primcall car (lref env.0x5556f6756f70))
         (const 1)))))])
     (call (lref r-loop.0x5556f67564e0)
      (lref env.0x5556f67560c0)
      (const 0))))])
   ([interpret/invoke.0x5556f673fa70 (lambda[0x5556f6753620]  (expr.0x5556f674d5b0)
    (env.0x5556f674d820)
    (find-global.0x5556f674d8e0)
    (let let
      (rands.0x5556f674dfa0 (primcall vector-ref (lref expr.0x5556f674d5b0)
      (const 2)))
      (rator.0x5556f6749d70 (call (lref interpret/preprocess.0x5556f673f9c0)
       (primcall vector-ref (lref expr.0x5556f674d5b0) (const 1))
       (lref env.0x5556f674d820)
       (lref find-global.0x5556f674d8e0)))
      (len.0x5556f6749390 (primcall vector-length (primcall vector-ref (lref expr.0x5556f674d5b0)
      (const 2))))
     (seq (fix ([loop.0x5556f6748d30 (lambda[0x5556f6750770]  (i.0x5556f674d150)
        (if (primcall < (lref i.0x5556f674d150)
         (lref len.0x5556f6749390))
         (seq (primcall vector-set! (lref rands.0x5556f674dfa0)
          (lref i.0x5556f674d150)
          (call (lref interpret/preprocess.0x5556f673f9c0)
           (primcall vector-ref (lref rands.0x5556f674dfa0)
           (lref i.0x5556f674d150))
           (lref env.0x5556f674d820)
           (lref find-global.0x5556f674d8e0)))
          (call (lref loop.0x5556f6748d30)
           (primcall + (lref i.0x5556f674d150) (const 1))))
         (const #<undefined>)))])
       (call (lref loop.0x5556f6748d30) (const 0)))
      (if (primcall eq? (lref len.0x5556f6749390) (const 0))
       (lambda[0x5556f67512e0]  (renv.0x5556f6750ca0)
        (call (call (lref rator.0x5556f6749d70)
          (lref renv.0x5556f6750ca0))
        ))
       (if (primcall eq? (lref len.0x5556f6749390) (const 1))
        (lambda[0x5556f6752040]  (renv.0x5556f67515a0)
         (call (call (lref rator.0x5556f6749d70)
           (lref renv.0x5556f67515a0))
          (call (primcall vector-ref (lref rands.0x5556f674dfa0)
           (const 0))
           (lref renv.0x5556f67515a0))))
        (if (primcall eq? (lref len.0x5556f6749390) (const 2))
         (lambda[0x5556f6753160]  (renv.0x5556f6752330)
          (call (call (lref rator.0x5556f6749d70)
            (lref renv.0x5556f6752330))
           (call (primcall vector-ref (lref rands.0x5556f674dfa0)
            (const 0))
            (lref renv.0x5556f6752330))
           (call (primcall vector-ref (lref rands.0x5556f674dfa0)
            (const 1))
            (lref renv.0x5556f6752330))))
         (if (primcall eq? (lref len.0x5556f6749390) (const 3))
          (lambda[0x5556f67545c0]  (renv.0x5556f6753420)
           (call (call (lref rator.0x5556f6749d70)
             (lref renv.0x5556f6753420))
            (call (primcall vector-ref (lref rands.0x5556f674dfa0)
             (const 0))
             (lref renv.0x5556f6753420))
            (call (primcall vector-ref (lref rands.0x5556f674dfa0)
             (const 1))
             (lref renv.0x5556f6753420))
            (call (primcall vector-ref (lref rands.0x5556f674dfa0)
             (const 2))
             (lref renv.0x5556f6753420))))
          (if (primcall eq? (lref len.0x5556f6749390) (const 4))
           (lambda[0x5556f6755d70]  (renv.0x5556f6754c50)
            (call (call (lref rator.0x5556f6749d70)
              (lref renv.0x5556f6754c50))
             (call (primcall vector-ref (lref rands.0x5556f674dfa0)
              (const 0))
              (lref renv.0x5556f6754c50))
             (call (primcall vector-ref (lref rands.0x5556f674dfa0)
              (const 1))
              (lref renv.0x5556f6754c50))
             (call (primcall vector-ref (lref rands.0x5556f674dfa0)
              (const 2))
              (lref renv.0x5556f6754c50))
             (call (primcall vector-ref (lref rands.0x5556f674dfa0)
              (const 3))
              (lref renv.0x5556f6754c50))))
           (lambda[0x5556f6757d50]  (renv.0x5556f6754880)
            (fix ([loop.0x5556f67561e0 (lambda[0x5556f6757880]  (i.0x5556f6756220)
              (proc.0x5556f6756290)
              (seq (if (primcall < (lref i.0x5556f6756220)
                (lref len.0x5556f6749390))
                (seq (primcall vector-set! (lref rands.0x5556f674dfa0)
                 (lref i.0x5556f6756220)
                 (call (primcall vector-ref (lref rands.0x5556f674dfa0)
                  (lref i.0x5556f6756220))
                  (lref renv.0x5556f6754880)))
                 (call (lref loop.0x5556f67561e0)
                  (primcall + (lref i.0x5556f6756220) (const 1))
                  (lref proc.0x5556f6756290)))
                (const #<undefined>))
               (call (gref #<identifier apply.0x5556f6756550>)
                (call (lref proc.0x5556f6756290)
                 (lref renv.0x5556f6754880))
                (call (gref #<identifier vector->list.0x5556f6756630>)
                 (lref rands.0x5556f674dfa0)))))])
             (call (lref loop.0x5556f67561e0)
              (const 0)
              (call (lref rator.0x5556f6749d70)
               (lref renv.0x5556f6754880)))))))))))))])
   ([interpret/let.0x5556f673fa30 (lambda[0x5556f674ee40]  (expr.0x5556f67494b0)
    (env.0x5556f6749b20)
    (find-global.0x5556f674a2b0)
    (let let
      (bindings.0x5556f6749c40 (primcall vector-ref (lref expr.0x5556f67494b0)
      (const 1)))
      (lens.0x5556f6740fb0 (primcall vector-length (primcall vector-ref (lref expr.0x5556f67494b0)
      (const 1))))
     (fix ([loop.0x5556f6741390 (lambda[0x5556f674e970]  (names.0x5556f6741320)
       (inits.0x5556f67424f0)
       (i.0x5556f67448b0)
       (if (primcall < (lref i.0x5556f67448b0)
        (lref lens.0x5556f6740fb0))
        (call (lref loop.0x5556f6741390)
         (primcall cons (primcall vector-ref (primcall vector-ref (lref bindings.0x5556f6749c40)
         (lref i.0x5556f67448b0))
         (const 0))
         (lref names.0x5556f6741320))
         (primcall cons (primcall cons (primcall vector-ref (primcall vector-ref (lref bindings.0x5556f6749c40)
         (lref i.0x5556f67448b0))
         (const 0))
         (primcall vector-ref (primcall vector-ref (lref bindings.0x5556f6749c40)
         (lref i.0x5556f67448b0))
         (const 1)))
         (lref inits.0x5556f67424f0))
         (primcall + (lref i.0x5556f67448b0) (const 1)))
        (let let
          (nenv.0x5556f67495e0 (call (lref interpret/extend-env.0x5556f673faf0)
           (lref env.0x5556f6749b20)
           (lref names.0x5556f6741320)))
         (let let
           (init-seq.0x5556f6748950 (call (gref #<identifier map.0x5556f67483f0>)
            (lambda[0x5556f674cad0]  (binding.0x5556f674a4b0)
             (let let
               (assignment.0x5556f674c300 (call (lref interpret/preprocess.0x5556f673f9c0)
                (primcall vector (const $lset)
                (primcall car (lref binding.0x5556f674a4b0))
                (primcall cdr (lref binding.0x5556f674a4b0)))
                (lref nenv.0x5556f67495e0)
                (lref find-global.0x5556f674a2b0)))
              (lref assignment.0x5556f674c300)))
            (lref inits.0x5556f67424f0)))
          (let let
            (body.0x5556f674c2c0 (call (lref interpret/preprocess.0x5556f673f9c0)
             (primcall vector-ref (lref expr.0x5556f67494b0)
             (const 2))
             (lref nenv.0x5556f67495e0)
             (lref find-global.0x5556f674a2b0)))
           (lambda[0x5556f674e650]  (renv.0x5556f674d110)
            (let let
              (renv.0x5556f674d1d0 (primcall cons (primcall make-vector (primcall + (const 1)
              (lref lens.0x5556f6740fb0))
              (primcall undefined ))
              (lref renv.0x5556f674d110)))
             (fix ([loop.0x5556f674d860 (lambda[0x5556f674e280]  (init.0x5556f674d8a0)
               (if (primcall null? (lref init.0x5556f674d8a0))
                (call (lref body.0x5556f674c2c0)
                 (lref renv.0x5556f674d1d0))
                (seq (call (primcall car (lref init.0x5556f674d8a0))
                  (lref renv.0x5556f674d1d0))
                 (call (lref loop.0x5556f674d860)
                  (primcall cdr (lref init.0x5556f674d8a0))))))])
              (call (lref loop.0x5556f674d860)
               (lref init-seq.0x5556f6748950))))))))))])
      (call (lref loop.0x5556f6741390)
       (const ())
       (const ())
       (const 0)))))])
   ([interpret/preprocess.0x5556f673f9c0 (lambda[0x5556f674a980]  (expr.0x5556f6741110)
    (env.0x5556f6741150)
    (find-global.0x5556f6741190)
    (let let
      (node.0x5556f67413d0 (primcall vector-ref (lref expr.0x5556f6741110)
      (const 0)))
     (if (primcall eq? (lref node.0x5556f67413d0) (const $gref))
      (call (lref interpret/global.0x5556f673fb80)
       (primcall vector-ref (lref expr.0x5556f6741110) (const 1))
       (lref find-global.0x5556f6741190))
      (if (primcall eq? (lref node.0x5556f67413d0) (const $gset))
       (call (lref interpret/set-global.0x5556f673fbc0)
        (primcall vector-ref (lref expr.0x5556f6741110) (const 1))
        (call (lref interpret/preprocess.0x5556f673f9c0)
         (primcall vector-ref (lref expr.0x5556f6741110) (const 2))
         (lref env.0x5556f6741150)
         (lref find-global.0x5556f6741190))
        (lref find-global.0x5556f6741190))
       (if (primcall eq? (lref node.0x5556f67413d0) (const $lref))
        (let let
          (addr.0x5556f6743330 (call (lref interpret/var-address.0x5556f673fab0)
           (primcall vector-ref (lref expr.0x5556f6741110) (const 1))
           (lref env.0x5556f6741150)))
         (if (lref addr.0x5556f6743330)
          (call (lref interpret/lexical.0x5556f673fdd0)
           (primcall car (lref addr.0x5556f6743330))
           (primcall cdr (lref addr.0x5556f6743330)))
          (primcall error (const "undefined variable")
          (primcall vector-ref (lref expr.0x5556f6741110)
          (const 1)))))
        (if (primcall eq? (lref node.0x5556f67413d0) (const $lset))
         (let let
           (addr.0x5556f6744e80 (call (lref interpret/var-address.0x5556f673fab0)
            (primcall vector-ref (lref expr.0x5556f6741110) (const 1))
            (lref env.0x5556f6741150)))
          (if (lref addr.0x5556f6744e80)
           (call (lref interpret/set-lexical.0x5556f673fe10)
            (primcall car (lref addr.0x5556f6744e80))
            (primcall cdr (lref addr.0x5556f6744e80))
            (call (lref interpret/preprocess.0x5556f673f9c0)
             (primcall vector-ref (lref expr.0x5556f6741110)
             (const 2))
             (lref env.0x5556f6741150)
             (lref find-global.0x5556f6741190)))
           (primcall error (const "undefined variable")
           (primcall vector-ref (lref expr.0x5556f6741110)
           (const 1)))))
         (if (primcall eq? (lref node.0x5556f67413d0) (const $if))
          (call (lref interpret/if.0x5556f673fe90)
           (call (lref interpret/preprocess.0x5556f673f9c0)
            (primcall vector-ref (lref expr.0x5556f6741110) (const 1))
            (lref env.0x5556f6741150)
            (lref find-global.0x5556f6741190))
           (call (lref interpret/preprocess.0x5556f673f9c0)
            (primcall vector-ref (lref expr.0x5556f6741110) (const 2))
            (lref env.0x5556f6741150)
            (lref find-global.0x5556f6741190))
           (call (lref interpret/preprocess.0x5556f673f9c0)
            (primcall vector-ref (lref expr.0x5556f6741110) (const 3))
            (lref env.0x5556f6741150)
            (lref find-global.0x5556f6741190)))
          (if (primcall eq? (lref node.0x5556f67413d0) (const $const))
           (let let
             (v.0x5556f67477a0 (primcall vector-ref (lref expr.0x5556f6741110)
             (const 1)))
            (lambda[0x5556f67481e0]  (renv.0x5556f6748070)
             (lref v.0x5556f67477a0)))
           (if (primcall eq? (lref node.0x5556f67413d0) (const $it))
            (lambda[0x5556f6748a70]  (renv.0x5556f6748510)
             (primcall undefined ))
            (if (primcall eq? (lref node.0x5556f67413d0)
             (const $lambda))
             (call (lref interpret/make-proc.0x5556f6740120)
              (lref expr.0x5556f6741110)
              (lref env.0x5556f6741150)
              (lref find-global.0x5556f6741190))
             (if (primcall eq? (lref node.0x5556f67413d0)
              (const $call))
              (call (lref interpret/invoke.0x5556f673fa70)
               (lref expr.0x5556f6741110)
               (lref env.0x5556f6741150)
               (lref find-global.0x5556f6741190))
              (if (primcall eq? (lref node.0x5556f67413d0)
               (const $let))
               (call (lref interpret/let.0x5556f673fa30)
                (lref expr.0x5556f6741110)
                (lref env.0x5556f6741150)
                (lref find-global.0x5556f6741190))
               (const #f)))))))))))))])
   (gset #<identifier eval-core.0x5556f6772c90> (lambda[0x5556f6774a70]  (x.0x5556f67731f0)
    (rest.0x5556f676d200)
    (let let
      (env.0x5556f676cf90 (if (primcall null? (lref rest.0x5556f676d200))
       (call (gref #<identifier interaction-environment.0x5556f676ec50>)
       )
       (primcall car (lref rest.0x5556f676d200))))
     (let let
       (clos.0x5556f6771ad0 (call (lref interpret/preprocess.0x5556f673f9c0)
        (call (gref #<identifier %core-preprocess.0x5556f6771c00>)
         (lref x.0x5556f67731f0))
        (const ())
        (lambda[0x5556f6774670]  (name.0x5556f6771240)
         (call (gref #<identifier environment-get-cell.0x5556f676c2c0>)
          (lref env.0x5556f676cf90)
          (lref name.0x5556f6771240)))))
      (call (lref clos.0x5556f6771ad0) (const ())))))))
  (call (gref #<identifier eval-core.0x5556f6742ce0>)
   (const (let ((x 42)) (print "hello and" x))))
  (call (gref #<identifier garbage-collect.0x5556f6754f70>) )
  (call (gref #<identifier eval-core.0x5556f6755310>)
   (const (let ((x 42)) (print "hello and" x))))))
