pub enum EvalError {
    IllegalKeywordUsage,
    IllegalFormalParameter,
    IllegalFormalRestParameter,
    DivisionByZero,
    UnboundVariable,
    VariableUndefined,
    VariableNotYetInitialized,
    MalformedCaseLambda,
    MalformedArgumentList,
    MalformedDefinition,
    MalformedTransformer,
    MalformedSyntaxRule,
    MalformedPatternInSyntaxRule,
    MalformedSyntaxRulePattern,
    MalformedSyntaxRuleLiterals,
    NoExpansion,
    InvalidContextInQuasiquote,
    MacroMismatchedRepetitionPatterns,
    MalformedBinding,
    MalformedBindings,
    MalformedTest,
    MalformedCondClause,
    MalformedCondExpandClause,
    MalformedCaseClause,
    ListTooLong,
    ProperList,
    DuplicateBinding,
    NotBoundInEnvironment,
    BindingImmutable,
    NonApplicativeValue,
    ExecuteEmptyList,
    IllegalRadix,
    ArgumentError,
    NoMatchingCase,
    ProcedureWithoutTag,
    MultiValueCountError,
    OutOfScope,
    DefineInLocalEnv,
    ImportInLocalEnv,
    ImportInLibrary,
    MalformedImportSet,
    ErroneousRedefinition,
    CannotExpandImportSet,
    DefineSyntaxInLocalEnv,
    CannotModifyLibraryEnv,
    CannotEnterProtectedBlockTwice,
    TargetBytevectorTooSmall,
    CannotOpenFile,
    CannotOpenAsset,
    CannotOpenUrl,
    InvalidUrl,
    CannotWriteToPort,
    InvalidDefaultPort,
    PortClosed,
    IllegalContinuationApplication,
    AttemptToModifyImmutableData,
    VectorEmpty,
    UnknownFieldOfRecordType,
    ExpectedRecordToAccessField,
    FieldCountError,
    EnumTypeEmpty,
    InvalidEnumValue,
    UnknownEnumValue,
    InvalidEnumSpecifier,
    InvalidEnumSet,
    IncompatibleEnumSetTypes,
    EnumNotMatchingEnumSetType,
    EnumNotMatchingEnumSet,
    MalformedLibraryDefinition,
    MalformedLibraryName,
    LibraryNotFound,
    UninitializedExports,
    InconsistentImports,
    CyclicImportExport,
    CorruptLibrary,
    RedefinitionOfImport,
    StackOverflow,
    UnknownFile,
    UnknownDirectory,
    UnknownSystemDirectory,
    CannotDecodeBytevector,
    CannotEncodeBytevector,
    InvalidDateTime,
    InvalidTimeZone,
    InvalidDateStyle,
    InvalidDefaultDrawing,
    InvalidDefaultShape,
    InvalidPoint,
    InvalidSize,
    InvalidRect,
    CannotLoadImage,
    CannotLoadImageAsset,
    CannotCreateImage,
    CannotCreateBitmap,
    InvalidImageFileType,
    InvalidCompositionOperation,
    InvalidFlipOrientation,
    UnknownInterpolateAlgorithm,
    UnsupportedGradientColorSpec,
    InvalidRegexpMatchingOption,
    UnableToBindValue,
    UnknownKeyword,
    ExpectedKeywordArg,
    Assertion,
    CannotInsertExif,
    CannotCreateInMemoryZipArchive,
    CannotMakeInMemoryZipArchiveFromData,
    CannotCreateZipArchive,
    CannotOpenZipArchive,
    CannotMutateZipArchive,
    ZipArchiveEntryDoesNotExist,
    ZipEntryTooLarge,
    UnknownFileOrDirectory,
    AbandonedMutex,
    MutexUseInInvalidContext,
    AttemptedToStartNonNewThread,
    JoinTimedOut,
    JoinWithMainThread,
    JoinWithItself,
    ThreadJoinInInvalidContext,
    ExpectedUncaughtException,
    TooManyThreads,
    ThreadTerminated,
    FirstArgOfProcViolation,
    SecondArgOfProcViolation,
    UnknownTextAlignment,
    UnknownTextFitMode,
    UnknownWritingDirection,
    UnknownParagraphStyleAttribute,
    ExpectedParagraphStyleAttributeKeyword,
    InvalidShadowSpec,
    CannotMakeStyledText,
    TextStyleNotApplicableToImage,
    UnsupportedDocType,
    ExpectedTextBlockStyleAttribute,
    UnknownTextBlockStyleAttribute,
}

impl EvalError {
    pub fn message(&self) -> &str {
        use EvalError::*;
        match self {
            IllegalKeywordUsage => "illegal usage of syntactic keyword as expression: $0",
            IllegalFormalParameter => "illegal formal parameter: $0",
            IllegalFormalRestParameter => "illegal formal rest parameter: $0",
            DivisionByZero => "division by zero",
            UnboundVariable => "unbound variable: $0",
            VariableUndefined => "variable is undefined: $0",
            VariableNotYetInitialized => "variable is not yet initialized: $0",
            MalformedCaseLambda => "malformed lambda case list: $0",
            MalformedArgumentList => "malformed argument list: $0",
            MalformedDefinition => "malformed definition: $0",
            MalformedTransformer => "malformed transformer: $0",
            MalformedSyntaxRule => "malformed syntax rule: $0",
            MalformedPatternInSyntaxRule => "malformed pattern $0 in syntax rule: $1",
            MalformedSyntaxRulePattern => "malformed syntax rule pattern: $0",
            MalformedSyntaxRuleLiterals => "malformed syntax rule literals: $0",
            NoExpansion => "no expansion for syntax rule: $0",
            InvalidContextInQuasiquote => "usage of $0 in invalid context within quasiquote: $1",
            MacroMismatchedRepetitionPatterns => {
                "macro could not be expanded; mismatched repetition patterns in macro: $0"
            }
            MalformedBinding => "malformed binding $0 in $1",
            MalformedBindings => "malformed bindings list $0",
            MalformedTest => "malformed test expression: $0",
            MalformedCondClause => "malformed clause in cond form: $0",
            MalformedCondExpandClause => "malformed clause in cond-expand form: $0",
            MalformedCaseClause => "malformed clause in case form: $0",
            ListTooLong => "argument list too long; overhead $0",
            ProperList => "expected proper list, but got: $0",
            DuplicateBinding => "symbol $0 bound multiple times in $1",
            NotBoundInEnvironment => "symbol $0 not bound in environment",
            BindingImmutable => "binding $0 is immutable",
            NonApplicativeValue => "non-applicative value: $0",
            ExecuteEmptyList => "attempt to execute empty list",
            IllegalRadix => "illegal radix: $0",
            ArgumentError => "wrong number of arguments for $0: $1",
            NoMatchingCase => "arguments $0 not matching any case of $1",
            ProcedureWithoutTag => "procedure does not have a tag",
            MultiValueCountError => "expected $0 values to be returned, but received instead: $1",
            OutOfScope => "out of scope evaluation of $0",
            DefineInLocalEnv => "definition of $0 in local environment",
            ImportInLocalEnv => "import of $0 in local environment",
            ImportInLibrary => "illegal import in library $,0",
            MalformedImportSet => "malformed import set: $0",
            ErroneousRedefinition => "attempted to redefine $0 with definition from $,1",
            CannotExpandImportSet => "cannot expand import set: $,0",
            DefineSyntaxInLocalEnv => "syntax definition of $0 in local environment",
            CannotModifyLibraryEnv => "cannot modify environment of library $,0 dynamically",
            CannotEnterProtectedBlockTwice => {
                "attempt to invoke expression protected by unwind-protect twice"
            }
            TargetBytevectorTooSmall => "target bytevector too small: $0",
            CannotOpenFile => "cannot open file: $,0",
            CannotOpenAsset => "cannot open asset: $0 of type $1",
            CannotOpenUrl => "cannot open URL: $,0",
            InvalidUrl => "invalid URL scheme: $,0",
            CannotWriteToPort => "cannot write to port: $0",
            InvalidDefaultPort => "invalid default port: $0",
            PortClosed => "port is closed: $0",
            IllegalContinuationApplication => {
                "continuation application in wrong context ($0 in $1)"
            }
            AttemptToModifyImmutableData => "attempt to modify immutable data: $0",
            VectorEmpty => "vector empty: $0",
            UnknownFieldOfRecordType => "unknown field $0 of record type $1",
            ExpectedRecordToAccessField => "expected record of type $0 to access field: $1",
            FieldCountError => "expected values for $0 fields, received instead: $1",
            EnumTypeEmpty => "enum-types must have at least one enum value",
            InvalidEnumValue => "invalid enum value: $0",
            UnknownEnumValue => "$1 not referring to an enum of type $0",
            InvalidEnumSpecifier => "invalid enum specifier: $0",
            InvalidEnumSet => "invalid enum set: $0",
            IncompatibleEnumSetTypes => "incompatible enum set types: $0 and $1",
            EnumNotMatchingEnumSetType => "enum $0 not matching enum set type $1",
            MalformedLibraryDefinition => "malformed library definition: $0",
            MalformedLibraryName => "malformed library name: $,0",
            UninitializedExports => "library $1 does not initialize the exported definitions $,0",
            InconsistentImports => "inconsistent import of $0 from library $1 and $2 in library $3",
            CyclicImportExport => {
                "exported definition $0 imported in a cyclic fashion in library $1"
            }
            CorruptLibrary => "internal state of library $0 is corrupt ($,1)",
            RedefinitionOfImport => "redefinition of imported definition $0 in library $1",
            StackOverflow => "stack overflow",
            UnknownFile => "file '$,0' unknown or a directory",
            UnknownDirectory => "directory '$,0' unknown or a file",
            UnknownSystemDirectory => "system directory '$,0' unknown",
            CannotDecodeBytevector => "unable to decode $0 into bytevector",
            CannotEncodeBytevector => "unable to encode $0 into bytevector",
            InvalidDateTime => "invalid/incomplete date-time components: $0",
            InvalidTimeZone => "invalid time zone: $0",
            InvalidDateStyle => "invalid date style: $0",
            UnableToBindValue => "unable to bind $0 to parameter at index $1",
            UnknownKeyword => "unknown keyword $1; cannot assign value $0",
            ExpectedKeywordArg => "expected keyword argument: $0",
            Assertion => "assertion failure in $,0: $1",
            UnknownFileOrDirectory => "file or directory is unknown",
            AbandonedMutex => "abandoned mutex was used in a lock-mutex! operation: $0",
            MutexUseInInvalidContext => "mutex used in invalid context: $0",
            AttemptedToStartNonNewThread => "attempted to start non-new thread: $0",
            JoinTimedOut => "thread-join! timed out, waiting for thread $0 to terminate",
            JoinWithMainThread => "attempted to join with main thread",
            JoinWithItself => "attempted to join with itself: $0",
            ThreadJoinInInvalidContext => "thread-join! used in invalid context: $0",
            ExpectedUncaughtException =>"expected an uncaught exception instead of $0",
            TooManyThreads => "too many threads",
            ThreadTerminated => "thread terminated",
            FirstArgOfProcViolation => "first argument $0 of $,1 violates requirement: $0 $,2",
            SecondArgOfProcViolation => "second argument $0 of $,1 violates requirement: $0 $,2",
            UnknownTextAlignment => "unknown text alignment: $0",
            UnknownTextFitMode => "unknown text fit mode: $0",
            UnknownWritingDirection => "unknown writing direction: $0",
            UnknownParagraphStyleAttribute => "unknown paragraph style attribute: $0",
            InvalidShadowSpec => "invalid shadow specification: $0",
            LibraryNotFound => "library $0 not found",
            _ => todo!()
        }
    }
}
