(select-module capy.internal)
(define (%dynamic-wind before during after)
  (before)
  (%wind-up before after)
  (let ((result (during)))
      ((cdr (%wind-down)))
      result))
(define-in-module capy (call-with-current-continuation f)
  (%unprotected-call/cc (lambda (k)
     (f (lambda (arg) (do ([base (%dynamic-wind-base k)])
         [(eqv? (%dynamic-wind-current) base)]
        ((cdr (%wind-down))))
     (do ((winders (%dynamic-winders k) (cdr winders)))
         ((null? winders) (k arg))
        ((car (car winders)))
        (%wind-up (car (car winders)) (cdr (car winders)))))))))
(define-in-module capy call/cc call-with-current-continuation)
(define-in-module capy dynamic-wind %dynamic-wind)
(define-in-module capy return #f)

(select-module capy)