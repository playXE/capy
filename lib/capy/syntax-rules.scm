(select-module capy.internal)

(define syntax-rules-transformer #f)
(define syntax-rules-transformer? #f)

(define (pattern-context name form module literals pvars renames ellipsis pvcnt maxlev env)
    (vector name form module literals pvars renames ellipsis pvcnt maxlev env))

(let ()
    (define pvref-level-max #xff)
    (define pvref-count-max #xff)
    (define (syntax-pattern pat vars level nitems)
        (tuple 'syntax-pattern pat vars level nitems))
    (define (syntax-pattern? x)
        (if (tuple? x)
            (eq? (tuple-ref x 0) 'syntax-pattern)) #f)
    (define (syntax-pattern-pattern x) (tuple-ref x 1))
    (define (syntax-pattern-vars x) (tuple-ref x 2))
    (define (syntax-pattern-level x) (tuple-ref x 3))
    (define (syntax-pattern-nitems x) (tuple-ref x 4))
    (define (set-syntax-pattern-vars! x vars)
        (tuple-set! x 2 vars))
    (define (set-syntax-pattern-level! x level)
        (tuple-set! x 3 level))
    (define (set-syntax-pattern-nitems! x nitems)
        (tuple-set! x 4 nitems))

    (define (pvref level count)
        (tuple 'pvref level count))
    (define (pvref? x)
        (if (tuple? x)
            (eq? (tuple-ref x 0) 'pvref)) #f)
    (define (pvref-level x) (tuple-ref x 1))
    (define (pvref-count x) (tuple-ref x 2))
    (define (set-pvref-level! x level)
        (tuple-set! x 1 level))
    
    (define (set-pvref-count! x count)
        (tuple-set! x 2 count))

    (define (pattern-context name form module literals pvars renames ellipsis pvcnt maxlev env)
        (vector name form module literals pvars renames ellipsis pvcnt maxlev env))

    (define (pctx-name pctx) (vector-ref pctx 0))
    (define (pctx-form pctx) (vector-ref pctx 1))
    (define (pctx-module pctx) (vector-ref pctx 2))
    (define (pctx-literals pctx) (vector-ref pctx 3))
    (define (pctx-pvars pctx) (vector-ref pctx 4))
    (define (pctx-renames pctx) (vector-ref pctx 5))
    (define (pctx-ellipsis pctx) (vector-ref pctx 6))
    (define (pctx-pvcnt pctx) (vector-ref pctx 7))
    (define (pctx-maxlev pctx) (vector-ref pctx 8))
    (define (pctx-env pctx) (vector-ref pctx 9))

    (define (set-pctx-name! pctx name)
        (vector-set! pctx 0 name))
    (define (set-pctx-form! pctx form)
        (vector-set! pctx 1 form))
    (define (set-pctx-module! pctx module)
        (vector-set! pctx 2 module))
    (define (set-pctx-literals! pctx literals)
        (vector-set! pctx 3 literals))
    (define (set-pctx-pvars! pctx pvars)
        (vector-set! pctx 4 pvars))
    (define (set-pctx-renames! pctx renames)
        (vector-set! pctx 5 renames))
    (define (set-pctx-ellipsis! pctx ellipsis)
        (vector-set! pctx 6 ellipsis))
    (define (set-pctx-pvcnt! pctx pvcnt)
        (vector-set! pctx 7 pvcnt))
    (define (set-pctx-maxlev! pctx maxlev)
        (vector-set! pctx 8 maxlev))
    (define (set-pctx-env! pctx env)
        (vector-set! pctx 9 env))

    (define (add-pvar pctx pat pvar)
        (if (> (syntax-pattern-level pat) pvref-level-max)
            (error 'syntax-rules "pattern levels too deeply nested in the macro of ~a" (pctx-name pctx)))
        (if (> (pctx-pvcnt pctx) pvref-count-max)
            (error 'syntax-rules "too many pattern variables in the macro definition of ~a" (pctx-name pctx)))

        (let ([pv (pvref (syntax-pattern-level pat) (pctx-pvcnt pctx))])
            (set-pctx-pvcnt! pctx (+ (pctx-pvcnt pctx) 1))
            (set-pctx-pvars! pctx (cons (cons pvar pv) (pctx-pvars pctx)))
            (set-syntax-pattern-vars! pat (cons pv (syntax-pattern-vars pat)))
            pv))
    (define (pvar->pvref pctx pat pvar)
        (let ([q (assq pvar (pctx-pvars pctx))])
            (if (not q)
                pvar 
                (let ([pvr (cdr q)])
                    (if (> (pvref-level pvr) (syntax-pattern-level pat))
                        (error 'syntax-rules "~a: pattern variable ~a is used in wrong level :~a" (pctx-name pctx) pvar (pctx-form pctx))
                    pvr)))))
    (define (ellipsis? pctx obj)
        (if (not (pctx-ellipsis pctx))
            #f
            (if (eq? #t (pctx-ellipsis pctx))
                (er-compare ellipsis obj (pctx-module pctx) (pctx-env pctx))
                (eq? (pctx-ellipsis pctx) obj))))

    (define (ellipsis-following? pctx pat)
        (if (cdr pat)
            (ellipsis? pctx (cadr pat))
            #f))
    (define (bad-ellipsis pctx)
        (error 'syntax-rules "bad ellipsis usage in macro definition of ~a: ~a" (pctx-name pctx) (pctx-form pctx)))

    (define (check-literals literals)
        (if (not (list? literals))
            (error 'syntax-rules "bad literal list in macro definiton: ~a" literals))
        (let loop ([lp literals] [res '()])
            (if (null? lp)
                res 
                (if (identifier? (car lp))
                    (loop (cdr lp) (cons (car lp) res))
                    (error 'syntax-rules "bad literal in macro definition: ~a" (car lp))))))

    (define (compile-rule1 pctx form pat pattern?)
        (if (pair? form)
            (if (and (pair? (cdr form))
                    (ellipsis? pctx (car form)))
                (if pattern?
                    (error 'syntax-rules "in definition of macro ~a: <ellipsis> can't appear at the beginning of list/vectors: ~a" (pctx-name pctx) form)
                    (let ([save-elli (pctx-ellipsis pctx)])
                        (set-pctx-ellipsis! pctx #f)
                        (let ([res (compile-rule1 pctx (cdr form) pat pattern?)])
                            (set-pctx-ellipsis! pctx save-elli)
                            res)))
                (let loop ([pp form] [res '()] [ellipsis-seen? #f])
                    (if (ellipsis-following? pp)
                        (if (and pattern? ellipsis-seen?)
                            (error 'syntax-rules "~a: ellipses are not allowed to appear within the same list/vector more than once in a pattern: ~a" (pctx-name) form)
                            (let loop2 ([base (car pp)] [pp (cdr pp)] [ntrailing 0] [ellipsis-nesting 1]))
                        )
                    )
                ))
                )
        )
)